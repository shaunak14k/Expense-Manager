/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

import ProjectDatabaseConnection.ConnectionProvider;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author shaun
 */
public class AddExpense extends javax.swing.JFrame {

    /**
     * Creates new form AddExpense
     */
    
    static int categoryList2Count = 0;
    
    String signInEmail;
    
    public AddExpense(String sign_in_email) {
        initComponents();
        
        signInEmail = sign_in_email="ss";
        
         //categoryList2.add("fsf", this);
         
         // EXPENSE TABLE
        try
        {
            Connection con = ConnectionProvider.getCon();
            Statement st;
            st = con.createStatement();
            ResultSet rs;
            
            // INCOME TABLE
            //System.out.println("START : "+summary_start_date);
            rs = st.executeQuery("select expense_id as 'Expense ID', expense_date as Date, expense_amount as Amount, expense_payee as Payee, expense_payment_method as 'Payment Method', expense_category as Category from Expense where user_email='"+signInEmail+"'");
            expenseSummaryTable.setModel(DbUtils.resultSetToTableModel(rs));
        }
        catch(Exception e)
        {
            System.out.println("HERE");
            JOptionPane.showMessageDialog(null, e);
        }
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        expenseSummaryTable = new rojerusan.RSTableMetro();
        backPanel = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        backPanel1 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        totalExpenseLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        expenseDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        expenseDateTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        expensePaymentMethodComboBox = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        deleteExpenseButton = new rojerusan.RSMaterialButtonCircle();
        addExpenseButton = new rojerusan.RSMaterialButtonCircle();
        updateExpenseButton = new rojerusan.RSMaterialButtonCircle();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        expenseIDLabel = new javax.swing.JLabel();
        expensePayeeTextField = new javax.swing.JTextField();
        expenseCategoryTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        categoryList1 = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        categoryList2 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jSeparator3 = new javax.swing.JSeparator();
        expenseAmountTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(340, 210));
        setMaximumSize(new java.awt.Dimension(1360, 750));
        setMinimumSize(new java.awt.Dimension(1360, 750));
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        expenseSummaryTable.setForeground(new java.awt.Color(102, 102, 255));
        expenseSummaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Income ID", "Date", "Amount", "Payee", "Payment Method", "Category"
            }
        ));
        expenseSummaryTable.setColorBackgoundHead(new java.awt.Color(51, 51, 51));
        expenseSummaryTable.setColorBordeFilas(new java.awt.Color(51, 102, 0));
        expenseSummaryTable.setColorFilasBackgound2(new java.awt.Color(255, 255, 255));
        expenseSummaryTable.setEditingColumn(0);
        expenseSummaryTable.setEditingRow(0);
        expenseSummaryTable.setMultipleSeleccion(false);
        expenseSummaryTable.setRowHeight(35);
        expenseSummaryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                expenseSummaryTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(expenseSummaryTable);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 1050, 200));

        backPanel.setBackground(new java.awt.Color(255, 51, 51));
        backPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backPanelMouseClicked(evt);
            }
        });
        backPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText(" Back");
        backPanel.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, -1, 40));

        jPanel2.add(backPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 80, -1));

        backPanel1.setBackground(new java.awt.Color(255, 51, 51));
        backPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backPanel1MouseClicked(evt);
            }
        });
        backPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel21.setFont(new java.awt.Font("Verdana", 1, 30)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("X");
        backPanel1.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 30, 40));

        jPanel2.add(backPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1310, 0, 50, 40));

        jSeparator4.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator4.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 100));
        jPanel2.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1350, 0, 10, 300));

        jSeparator5.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator5.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 100));
        jPanel2.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 10, 300));

        jSeparator6.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator6.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 199));
        jPanel2.add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1360, 10));

        totalExpenseLabel.setBackground(new java.awt.Color(0, 0, 0));
        totalExpenseLabel.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        totalExpenseLabel.setText("Total Expense");
        jPanel2.add(totalExpenseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 840, 30));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1360, 300));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        expenseDateChooser.setBackground(new java.awt.Color(75, 137, 243));
        expenseDateChooser.setToolTipText("");
        expenseDateChooser.setDateFormatString("yyyy-MM-dd");
        expenseDateChooser.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        expenseDateChooser.setMaxSelectableDate(new java.util.Date(253370748688000L));
        expenseDateChooser.setMinSelectableDate(new java.util.Date(-62135785712000L));
        expenseDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                expenseDateChooserPropertyChange(evt);
            }
        });
        jPanel1.add(expenseDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 160, 40, 30));

        jLabel10.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Expense ID");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 50, 140, 30));

        jLabel11.setFont(new java.awt.Font("Verdana", 3, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Rs.");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 170, 30, 30));

        expenseDateTextField.setEditable(false);
        expenseDateTextField.setBackground(new java.awt.Color(51, 51, 51));
        expenseDateTextField.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        expenseDateTextField.setForeground(new java.awt.Color(255, 255, 255));
        expenseDateTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        expenseDateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expenseDateTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(expenseDateTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 160, 240, 30));

        jLabel12.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Payee");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 240, 260, 30));

        expensePaymentMethodComboBox.setBackground(new java.awt.Color(75, 137, 243));
        expensePaymentMethodComboBox.setFont(new java.awt.Font("Verdana", 3, 15)); // NOI18N
        expensePaymentMethodComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Cheque", "Credit card", "Debit", "Electronic Transfer", " " }));
        expensePaymentMethodComboBox.setBorder(null);
        jPanel1.add(expensePaymentMethodComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 280, 280, 30));

        jLabel13.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Payment Method");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 230, 280, 30));

        jLabel14.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frames/bank.png"))); // NOI18N
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 290, 30, 30));

        jLabel15.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Amount");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 130, 130, 30));

        jLabel16.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frames/cheque.png"))); // NOI18N
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 280, 30, 30));

        deleteExpenseButton.setBackground(new java.awt.Color(204, 204, 204));
        deleteExpenseButton.setForeground(new java.awt.Color(0, 0, 0));
        deleteExpenseButton.setText("DELETE");
        deleteExpenseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteExpenseButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deleteExpenseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 360, 180, 60));

        addExpenseButton.setBackground(new java.awt.Color(204, 204, 204));
        addExpenseButton.setForeground(new java.awt.Color(0, 0, 0));
        addExpenseButton.setText("ADD");
        addExpenseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addExpenseButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addExpenseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 360, 180, 60));

        updateExpenseButton.setBackground(new java.awt.Color(204, 204, 204));
        updateExpenseButton.setForeground(new java.awt.Color(0, 0, 0));
        updateExpenseButton.setText("UPDATE");
        updateExpenseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateExpenseButtonActionPerformed(evt);
            }
        });
        jPanel1.add(updateExpenseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 360, 180, 60));

        jLabel19.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frames/calendar.png"))); // NOI18N
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 160, 30, 30));

        jLabel20.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Payment Date");
        jPanel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 120, 210, 30));

        expenseIDLabel.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        expenseIDLabel.setForeground(new java.awt.Color(255, 255, 255));
        expenseIDLabel.setText("ID");
        jPanel1.add(expenseIDLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 50, 40, 30));

        expensePayeeTextField.setBackground(new java.awt.Color(51, 51, 51));
        expensePayeeTextField.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        expensePayeeTextField.setForeground(new java.awt.Color(255, 255, 255));
        expensePayeeTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        expensePayeeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expensePayeeTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(expensePayeeTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 290, 240, 30));

        expenseCategoryTextField.setBackground(new java.awt.Color(51, 51, 51));
        expenseCategoryTextField.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        expenseCategoryTextField.setForeground(new java.awt.Color(255, 255, 255));
        expenseCategoryTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        expenseCategoryTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expenseCategoryTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(expenseCategoryTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 140, 350, 30));

        jLabel9.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Select any Category");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 100, 290, 30));

        jLabel17.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frames/salary_category.png"))); // NOI18N
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 140, -1, -1));

        categoryList1.setBackground(new java.awt.Color(51, 51, 51));
        categoryList1.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        categoryList1.setForeground(new java.awt.Color(255, 255, 255));
        categoryList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Automobile", "Entertainment", "Health Care", "Household", "Personal", "Taxes", "Travel", "Other" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        categoryList1.setToolTipText("");
        categoryList1.setAutoscrolls(false);
        categoryList1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        categoryList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                categoryList1ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(categoryList1);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 190, 140, 170));

        categoryList2.setBackground(new java.awt.Color(51, 51, 51));
        categoryList2.setFont(new java.awt.Font("Sitka Small", 0, 14)); // NOI18N
        categoryList2.setForeground(new java.awt.Color(255, 255, 255));
        categoryList2.setToolTipText("");
        categoryList2.setAutoscrolls(false);
        categoryList2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        categoryList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                categoryList2ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(categoryList2);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 190, 210, 170));

        jLabel1.setFont(new java.awt.Font("Sitka Small", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Manage Expense");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 40, 280, -1));

        jPanel9.setBackground(new java.awt.Color(0, 153, 0));
        jPanel9.setForeground(new java.awt.Color(255, 102, 102));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 80, 350, 3));

        jSeparator3.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 199));
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1360, 10));

        expenseAmountTextField.setBackground(new java.awt.Color(51, 51, 51));
        expenseAmountTextField.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        expenseAmountTextField.setForeground(new java.awt.Color(255, 255, 255));
        expenseAmountTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        expenseAmountTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expenseAmountTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(expenseAmountTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 170, 240, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 300, 1360, 450));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void categoryList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_categoryList1ValueChanged
        // TODO add your handling code here:
        
        // set to text field
        expenseCategoryTextField.setText(categoryList1.getSelectedValue());
        
        // Counter reset for 2nd category list
        categoryList2Count = 0;
        
        DefaultListModel listModel1 = new DefaultListModel();
        
              
        // AUTOMOBILE
        if((categoryList1.getSelectedValue()).equals("Automobile"))
        {
            String[] items = {"Fuel","Insurance","Loan","Maintainance","Other"};
            for(int i=0; i<items.length; i++)
                listModel1.addElement(items[i]);
            categoryList2.setModel(listModel1);
        }
        
        // ENTERTAINMENT
        else if((categoryList1.getSelectedValue()).equals("Entertainment"))
        {
            String[] items = {"Concerts","Movies", "OTT Platform", "Video Games/Consoles", "Other"};
            for(int i=0; i<items.length; i++)
                listModel1.addElement(items[i]);
            categoryList2.setModel(listModel1);
        }
        
        // HEALTH CARE
        else if((categoryList1.getSelectedValue()).equals("Health Care"))
        {
            String[] items = {"Medical Bills", "Loan", "Health Insurance", "Other"};
            for(int i=0; i<items.length; i++)
                listModel1.addElement(items[i]);
            categoryList2.setModel(listModel1);
        }
        
        // HOUSEHOLD
        else if((categoryList1.getSelectedValue()).equals("Household"))
        {
            String[] items = {"Groceries","Consumables", "Applicances", "Household Tools", "Loan", "Other"};
            for(int i=0; i<items.length; i++)
                listModel1.addElement(items[i]);
            categoryList2.setModel(listModel1);
        }
        
        // PERSONAL
        else if((categoryList1.getSelectedValue()).equals("Personal"))
        {
            String[] items = {"Clothing" ,"Grooming", "Child Care", "Education", "Other"};
            for(int i=0; i<items.length; i++)
                listModel1.addElement(items[i]);
            categoryList2.setModel(listModel1);
        }
        
        // TAXES
        else if((categoryList1.getSelectedValue()).equals("Taxes"))
        {
            String[] items = {"Service Tax" ,"Property Tax", "Sales Tax", "Income Tax", "Other"};
            for(int i=0; i<items.length; i++)
                listModel1.addElement(items[i]);
            categoryList2.setModel(listModel1);
        }
        
        // TRAVEL
        else if((categoryList1.getSelectedValue()).equals("Travel"))
        {
            String[] items = {"Travel Tickets" ,"Hotel Bills", "Other"};
            for(int i=0; i<items.length; i++)
                listModel1.addElement(items[i]);
            categoryList2.setModel(listModel1);
        }
        
        else
        {
            listModel1.addElement("");
            categoryList2.setModel(listModel1);
        }
        
    }//GEN-LAST:event_categoryList1ValueChanged
    
    
    private void categoryList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_categoryList2ValueChanged
        // TODO add your handling code here:
        
        // **** TO RESET THE VALUE OF CATEGORY while retaining the value from 1st category
        String str="";
        String str2="";
        
        if(categoryList2Count == 1)
        {
            str = expenseCategoryTextField.getText();
            char[] ch1 = new char[str.length()];
            
            for(int i=0; i<str.length() ; i++)
            {
                ch1[i] = str.charAt(i);
                if(ch1[i] == ' ')
                    break;
                str2 = str2+ch1[i];
            }
            
            System.out.println(str2);
            
            expenseCategoryTextField.setText(str2 + " - " + categoryList2.getSelectedValue());
                                  
            return;
        }
        String expenseCategory = categoryList2.getSelectedValue();
        expenseCategoryTextField.setText(expenseCategoryTextField.getText() + " - " + expenseCategory);
        
        categoryList2Count = 1;
    }//GEN-LAST:event_categoryList2ValueChanged

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        
        try
        {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            
            ResultSet rs = st.executeQuery("select max(expense_ID), MAX(expense_amount) from Expense");
            if(rs.next())  //first as it would be possible there is not value present
            {
                int news_id = rs.getInt(1);
                news_id = news_id + 1;
                
                String str = String.valueOf(news_id);
                expenseIDLabel.setText(str);
                
                totalExpenseLabel.setText("Total Expense : Rs. "+rs.getString(2));
            }
            else
            {
                System.out.println("HERE ELSE");
                expenseIDLabel.setText("1");
            }
        }
        catch(Exception e)
        {
            System.out.println("HERE");
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_formComponentShown

    private void expenseDateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_expenseDateChooserPropertyChange
        // TODO add your handling code here:

        String incomeDate = String.valueOf(expenseDateChooser.getDate());
        // FORMAT THE INCOME DATE
        try
        {
            String dateStr = incomeDate;
            DateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
            Date date = (Date)formatter.parse(dateStr);
            System.out.println(date);

            Calendar cal = Calendar.getInstance();
            cal.setTime(date);
            String formatedDate = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" +cal.get(Calendar.DATE);
            System.out.println("formatedDate : " + formatedDate);

            incomeDate = formatedDate;

            expenseDateTextField.setText(incomeDate);

            //String formatedDate = cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" +         cal.get(Calendar.YEAR);
            //System.out.println("formatedDate : " + formatedDate);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_expenseDateChooserPropertyChange

    private void expenseDateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expenseDateTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_expenseDateTextFieldActionPerformed

    private void deleteExpenseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteExpenseButtonActionPerformed
        // TODO add your handling code here:

        int expenseID = Integer.parseInt(expenseIDLabel.getText());

        try
        {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();

            // Check if there exists any entry
            // Update Income table
            ResultSet rs = st.executeQuery("select * from Expense where expense_id='"+expenseID+"'");
            if(!rs.next())  //first as it would be possible there is not value present
            {
                JOptionPane.showMessageDialog(null, "No such record exists to delete");
                return;
            }

            // Delete from EXPENSE table
            st.executeUpdate("delete from Expense where expense_id='"+expenseID+"' ");
            
            // Delete from TRANSACTION Table
            st.executeUpdate("delete from Transaction where income_expense_id='"+expenseID+"' ");

            JOptionPane.showMessageDialog(null, "Expense details Deleted successfully");
            setVisible(false);
            new AddExpense(signInEmail).setVisible(true);

        }
        //Any other Exceotion
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
            System.out.println(e);
        }
    }//GEN-LAST:event_deleteExpenseButtonActionPerformed

    private void addExpenseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addExpenseButtonActionPerformed
        // TODO add your handling code here:

        int expense_id=0;
        try
        {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();

            ResultSet rs = st.executeQuery("select max(expense_id) from Expense");
            if(rs.next())  //first as it would be possible there is not value present
            {
                expense_id = rs.getInt(1);
                expense_id = expense_id + 1;

                String str = String.valueOf(expense_id);
                expenseIDLabel.setText(str);
            }
            else
            {
                System.out.println("HERE ELSE");
                expenseIDLabel.setText("1");
            }
        }
        catch(Exception e)
        {
            System.out.println("HERE");
            JOptionPane.showMessageDialog(null, e);
        }

        // RESET FRAME
        if(!expenseIDLabel.getText().equals(String.valueOf(expense_id)))
        {
            new AddExpense(signInEmail).setVisible(false);
            new AddExpense(signInEmail).setVisible(true);
            
//            incomeDateTextField.setVisible(false);
//            incomeDateChooser.setVisible(true);
            
            JOptionPane.showMessageDialog(null,"Please enter Expense Details now");

            return;
        }
        
        // ADD DETAILS
        int expenseID = Integer.parseInt(expenseIDLabel.getText());
        String expense_date = String.valueOf(expenseDateChooser.getDate());
        String expense_amount = expenseAmountTextField.getText();
        String expense_payee = expensePayeeTextField.getText();
        String expense_payment_method = String.valueOf(expensePaymentMethodComboBox.getSelectedItem());
        String expense_category = expenseCategoryTextField.getText();

        int budgetAmount=0;
        String budgetCategory="";
        int budgetChangeFlag = 0;
        // CHECK IF EXPENSE EXCEEDS BUDGET
        try
        {
            // FORMAT THE DATE
            String dateStr = expense_date;
            DateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
            Date date = (Date)formatter.parse(dateStr);
            System.out.println(date);

            Calendar cal = Calendar.getInstance();
            cal.setTime(date);
            String formatedDate = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" +cal.get(Calendar.DATE);
            System.out.println("formatedDate : " + formatedDate);

            //Date set in string
            expense_date = formatedDate;
            
            // Create a date variable for comparison
            Date expenseDateDate=new SimpleDateFormat("yyyy-MM-dd").parse(expense_date);  
            
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs;
            
            //CHECK IF EXPENSE EXCEEDS INCOME
            //int incomeSum;
            int flag=0;
            rs = st.executeQuery("select SUM(income_amount) from Income where user_email='"+signInEmail+"'");
            while(rs.next())
            {
                if(Integer.parseInt(expense_amount) > rs.getInt(1))
                {
                    int result = JOptionPane.showConfirmDialog(new ExpenseManager(),"Expense Amount exceeds total Income. Do you still want to continue ? ", "Expense Manager", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                    if(result != JOptionPane.YES_OPTION)
                    {
                        flag=1;
                        throw new OperationCancelledException();
                        
                    }
                    
                }
            }
            
            
            //CHECK HERE IF AMOUNT EXCEEDS BUDGET
            rs = st.executeQuery("select budget_start_date, budget_end_date, budget_category, budget_amount from Budget where user_email='"+signInEmail+"'");
            while(rs.next())
            {
                Date budgetStartDate = rs.getDate(1);
                Date budgetEndDate = rs.getDate(2);
                budgetCategory = rs.getString(3);
                budgetAmount = rs.getInt(4);
                
                System.out.println("XX"+budgetStartDate);
                System.out.println(budgetEndDate);
                System.out.println(budgetCategory);
                System.out.println(expense_category);
                System.out.println(budgetAmount);
                System.out.println(Integer.parseInt(expense_amount));
                
                if(expenseDateDate.compareTo(budgetStartDate) >= 0 && expenseDateDate.compareTo(budgetEndDate) <= 0)
                {
                    if(budgetAmount < Integer.parseInt(expense_amount) && budgetCategory.equals(expense_category))
                    {
                        throw new ExpenseExceedsBudgetException();
                    }
                    else if(budgetAmount > Integer.parseInt(expense_amount) && budgetCategory.equals(expense_category))
                    {
                        budgetAmount = budgetAmount - Integer.parseInt(expense_amount);
                        // Change budget value according to expense made
                        Statement s = con.createStatement();
                        s.executeUpdate("update Budget set budget_amount = '"+budgetAmount+"' where user_email='"+signInEmail+"' and budget_category='"+budgetCategory+"'");
                        
                        budgetChangeFlag = 1;
                        
                    }
                }  
            }
        }
        
        catch(ExpenseExceedsBudgetException e)
        {
            System.out.println(e);
            JOptionPane.showMessageDialog(null," The amount exceeds the budget set for '"+expense_category+"' \n\n Budget - Rs. "+budgetAmount);
            return;
        }
        
        catch(OperationCancelledException e)
        {
            JOptionPane.showMessageDialog(null, "Operation was cancelled");
        }
        
        catch(Exception e)
        {
            System.out.println(e);
            JOptionPane.showMessageDialog(null,e);
            return;
        }
        
        
//        // FORMAT THE INCOME DATE
//        try
//        {
//            String dateStr = expense_date;
//            DateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
//            Date date = (Date)formatter.parse(dateStr);
//            System.out.println(date);
//
//            Calendar cal = Calendar.getInstance();
//            cal.setTime(date);
//            String formatedDate = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" +cal.get(Calendar.DATE);
//            System.out.println("formatedDate : " + formatedDate);
//
//            expense_date = formatedDate;
//
//            //String formatedDate = cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" +         cal.get(Calendar.YEAR);
//            //System.out.println("formatedDate : " + formatedDate);
//        }
//        catch(Exception e)
//        {
//            System.out.println(e);
//        }

        System.out.println(expenseID);
        System.out.println(expense_date);
        System.out.println(expense_amount);
        System.out.println(expense_payee);
        System.out.println(expense_payment_method);
        System.out.println(expense_category);

        try
        {
            //Check if all fields are filled
            if(expense_date.equals("") || expense_amount.equals("") || expense_payee.equals("") || expense_payment_method.equals("") || expense_category.equals(""))
            {
                throw new NullFieldException();
            }

            Connection con = ConnectionProvider.getCon();
            Statement st1 = con.createStatement();

            st1.executeUpdate("insert into Expense values ('"+expenseID+"','"+signInEmail+"','"+expense_date+"','"+expense_amount+"','"+expense_payee+"','"+expense_category+"','"+expense_payment_method+"')");
            //String query = "insert into Customer "+"values ("

            JOptionPane.showMessageDialog(null, "Successfully added Expense Details");
            
            if(budgetChangeFlag==1)
                JOptionPane.showMessageDialog(null, "Budget for '"+budgetCategory+"' has been updated. \n\n Budget - Rs."+budgetAmount);
            
            // INSERT INTO 3rd TABLE
            try
            {
                int transaction_id=0;

                ResultSet rs1 = st1.executeQuery("select max(transaction_id) from Transaction");
                if(rs1.next())  //first as it would be possible there is not value present
                {
                    transaction_id = rs1.getInt(1);
                    transaction_id = transaction_id + 1;
                }

                Statement st2 = con.createStatement();
                st2.executeUpdate("insert into Transaction values ('"+transaction_id+"','"+signInEmail+"','Expense','"+expenseID+"', '"+expense_date+"','"+expense_amount+"','"+expense_category+"','"+expense_payee+"')"); 
                   
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null,e);
                System.out.println(e);
            }

            setVisible(false);
            new AddExpense(signInEmail).setVisible(true);

        }

        //Fields are null
        catch(NullFieldException e)
        {
            //new NullFieldException();
            JOptionPane.showMessageDialog(null,"Please fill all the details");
        }

        //Any other Exceotion
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
            System.out.println(e);
        }

        //counter = 0;

    }//GEN-LAST:event_addExpenseButtonActionPerformed

    private void updateExpenseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateExpenseButtonActionPerformed
        // TODO add your handling code here:

        int expenseID = Integer.parseInt(expenseIDLabel.getText());

        // CHECK IF RECORD EXISTS IN TABLE TO UPDATE
        try
        {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();

            // Update Income table
            ResultSet rs = st.executeQuery("select * from Expense where expense_id='"+expenseID+"'");

            if(!rs.next())  //first as it would be possible there is not value present
            {
                JOptionPane.showMessageDialog(null, "No such record exists to update");
                return;
            }
            //            setVisible(false);
            //            new AddIncome(signInEmail).setVisible(true);
        }
        catch(Exception e){}

        
        
        String expense_date = expenseDateTextField.getText();
        String expense_amount = expenseAmountTextField.getText();
        String expense_payee = expensePayeeTextField.getText();
        String expense_payment_method = String.valueOf(expensePaymentMethodComboBox.getSelectedItem());
        String expense_category = expenseCategoryTextField.getText();

        
        int budgetAmount=0;
        String budgetCategory="";
        int budgetChangeFlag = 0;
        // CHECK IF EXPENSE EXCEEDS BUDGET
        try
        {
            
            //Check if all fields are filled
            if(expense_date.equals("") || expense_amount.equals("") || expense_payee.equals("") || expense_payment_method.equals("") || expense_category.equals(""))
            {
                throw new UpdateProfile.NullFieldException();
            }

            
            // FORMAT THE DATE
            String dateStr = expense_date;
            DateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
            Date date = (Date)formatter.parse(dateStr);
            System.out.println(date);

            Calendar cal = Calendar.getInstance();
            cal.setTime(date);
            String formatedDate = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" +cal.get(Calendar.DATE);
            System.out.println("formatedDate : " + formatedDate);

            //Date set in string
            expense_date = formatedDate;
            
            // Create a date variable for comparison
            Date expenseDateDate=new SimpleDateFormat("yyyy-MM-dd").parse(expense_date);  
            
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs;
            
            //CHECK IF EXPENSE EXCEEDS INCOME
            //int incomeSum;
            rs = st.executeQuery("select SUM(income_amount) from Income where user_email='"+signInEmail+"'");
            while(rs.next())
            {
                if(Integer.parseInt(expense_amount) > rs.getInt(1))
                {
                    int result = JOptionPane.showConfirmDialog(new ExpenseManager(),"Expense Amount exceeds total Income. Do you still want to continue ? ", "Expense Manager", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                    if(result != JOptionPane.YES_OPTION)
                    {
                        throw new OperationCancelledException();
                    }
                    
                }
            }
            
            //CHECK HERE IF AMOUNT EXCEEDS BUDGET
            rs = st.executeQuery("select budget_start_date, budget_end_date, budget_category, budget_amount from Budget where user_email='"+signInEmail+"'");
            while(rs.next())
            {
                Date budgetStartDate = rs.getDate(1);
                Date budgetEndDate = rs.getDate(2);
                budgetCategory = rs.getString(3);
                budgetAmount = rs.getInt(4);
                
                System.out.println("XX"+budgetStartDate);
                System.out.println(budgetEndDate);
                System.out.println(budgetCategory);
                System.out.println(expense_category);
                System.out.println(budgetAmount);
                System.out.println(Integer.parseInt(expense_amount));
                
                if(expenseDateDate.compareTo(budgetStartDate) >= 0 && expenseDateDate.compareTo(budgetEndDate) <= 0)
                {
                    if(budgetAmount < Integer.parseInt(expense_amount) && budgetCategory.equals(expense_category))
                    {
                        throw new ExpenseExceedsBudgetException();
                    }
                    else if(budgetAmount > Integer.parseInt(expense_amount) && budgetCategory.equals(expense_category))
                    {
                        budgetAmount = budgetAmount - Integer.parseInt(expense_amount);
                        // Change budget value according to expense made
                        Statement s = con.createStatement();
                        s.executeUpdate("update Budget set budget_amount = '"+budgetAmount+"' where user_email='"+signInEmail+"' and budget_category='"+budgetCategory+"'");
                        
                        budgetChangeFlag = 1;
                        
                    }
                }  
            }
        }
        
        catch(ExpenseExceedsBudgetException e)
        {
            System.out.println(e);
            JOptionPane.showMessageDialog(null," The amount exceeds the budget set for '"+expense_category+"' \n\n Budget - Rs. "+budgetAmount);
            return;
        }
        
        catch(OperationCancelledException e)
        {
            JOptionPane.showMessageDialog(null, "Operation was cancelled");
        }
        
        catch(Exception e)
        {
            System.out.println(e);
            JOptionPane.showMessageDialog(null,e);
            return;
        }
        
        
        try
        {
            
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            
            // Update Income table
            st.executeUpdate("update Expense set expense_date='"+expense_date+"', expense_amount='"+expense_amount+"', expense_payee='"+expense_payee+"', expense_payment_method='"+expense_payment_method+"', expense_category='"+expense_category+"' where expense_id = '"+expenseID+"'");

            // Update Transaction table
            st.executeUpdate("update Transaction set transaction_date='"+expense_date+"', transaction_amount='"+expense_amount+"', transaction_beneficiary='"+expense_payee+"', transaction_category='"+expense_category+"' where transaction_id = '"+expenseID+"'");
            
            JOptionPane.showMessageDialog(null, "Expense details Updated successfully");
            setVisible(false);
            new AddExpense(signInEmail).setVisible(true);

        }

 
        //Duplicate username
        catch (SQLIntegrityConstraintViolationException e)
        {
            JOptionPane.showMessageDialog(null, "This email is alerady taken");
        }

        //Any other Exceotion
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
            System.out.println(e);
        }

    }//GEN-LAST:event_updateExpenseButtonActionPerformed

    private void backPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backPanelMouseClicked
        // TODO add your handling code here:5

        dispose();
        setVisible(false);
        new Home(signInEmail).setVisible(true);
    }//GEN-LAST:event_backPanelMouseClicked

    private void expensePayeeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expensePayeeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_expensePayeeTextFieldActionPerformed

    private void expenseCategoryTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expenseCategoryTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_expenseCategoryTextFieldActionPerformed

    private void expenseSummaryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_expenseSummaryTableMouseClicked
        // TODO add your handling code here:

        int rowNo = expenseSummaryTable.getSelectedRow();
        TableModel model = expenseSummaryTable.getModel();

        //        incomeDateChooser.setVisible(false);
        //        incomeDateTextField.setVisible(true);

        //tring str = model.getValueAt(rowNo, 1).toString();
        //System.out.println("\n ::_ "+str);
        //SimpleDateFormat dF = new SimpleDateFormat("yyyy-MM-dd");

        expenseIDLabel.setText(model.getValueAt(rowNo,0).toString());
        //incomeDateChooser.setDate(2022/11/11);
        expenseDateTextField.setText(model.getValueAt(rowNo, 1).toString());
        expenseAmountTextField.setText(model.getValueAt(rowNo, 2).toString());
        expensePayeeTextField.setText(model.getValueAt(rowNo, 3).toString());
        expensePaymentMethodComboBox.setSelectedItem(model.getValueAt(rowNo, 4).toString());
        expenseCategoryTextField.setText(model.getValueAt(rowNo, 5).toString());

    }//GEN-LAST:event_expenseSummaryTableMouseClicked

    private void backPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backPanel1MouseClicked
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(new ExpenseManager(),"Sure? You want to exit?", "Expense Manager", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if(result == JOptionPane.YES_OPTION)
            System.exit(0);
    }//GEN-LAST:event_backPanel1MouseClicked

    private void expenseAmountTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expenseAmountTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_expenseAmountTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddExpense.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddExpense.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddExpense.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddExpense.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddExpense("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojerusan.RSMaterialButtonCircle addExpenseButton;
    private javax.swing.JPanel backPanel;
    private javax.swing.JPanel backPanel1;
    private javax.swing.JList<String> categoryList1;
    private javax.swing.JList<String> categoryList2;
    private rojerusan.RSMaterialButtonCircle deleteExpenseButton;
    private javax.swing.JTextField expenseAmountTextField;
    private javax.swing.JTextField expenseCategoryTextField;
    private com.toedter.calendar.JDateChooser expenseDateChooser;
    private javax.swing.JTextField expenseDateTextField;
    private javax.swing.JLabel expenseIDLabel;
    private javax.swing.JTextField expensePayeeTextField;
    private javax.swing.JComboBox<String> expensePaymentMethodComboBox;
    private rojerusan.RSTableMetro expenseSummaryTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JLabel totalExpenseLabel;
    private rojerusan.RSMaterialButtonCircle updateExpenseButton;
    // End of variables declaration//GEN-END:variables

    static class StopProcessException extends Exception{}
    static class NullFieldException extends Exception{}
    static class ContactNumberException extends Exception{}
    static class ExpenseExceedsBudgetException extends Exception{}
    static class OperationCancelledException extends Exception{}
}
