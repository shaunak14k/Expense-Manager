/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

import ProjectDatabaseConnection.ConnectionProvider;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author shaun
 */
public class AddBudget extends javax.swing.JFrame {

    /**
     * Creates new form AddBudget
     */
    
    String signInEmail;
    
    static int categoryList2Count = 0;
    
    public AddBudget(String sign_in_email) {
        initComponents();
        
        signInEmail = sign_in_email;
        
        budgetStartDateTextField.setEditable(false);
        budgetEndDateTextField.setEditable(false);  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        budgetStartDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel10 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        budgetStartDateTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        deleteBudgetButton = new rojerusan.RSMaterialButtonCircle();
        addBudgetButton = new rojerusan.RSMaterialButtonCircle();
        updateBudgetButton = new rojerusan.RSMaterialButtonCircle();
        backPanel = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        budgetIDLabel = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        budgetAmountTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        categoryList2 = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        categoryList1 = new javax.swing.JList<>();
        budgetCategoryTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        budgetEndDateChooser = new com.toedter.calendar.JDateChooser();
        budgetEndDateTextField = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        budgetSummaryTable = new rojerusan.RSTableMetro();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        backPanel1 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(340, 210));
        setMaximumSize(new java.awt.Dimension(1360, 750));
        setMinimumSize(new java.awt.Dimension(1360, 750));
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 51, 51));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        budgetStartDateChooser.setBackground(new java.awt.Color(75, 137, 243));
        budgetStartDateChooser.setToolTipText("");
        budgetStartDateChooser.setDateFormatString("yyyy-MM-dd");
        budgetStartDateChooser.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        budgetStartDateChooser.setMaxSelectableDate(new java.util.Date(253370748688000L));
        budgetStartDateChooser.setMinSelectableDate(new java.util.Date(-62135785712000L));
        budgetStartDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                budgetStartDateChooserPropertyChange(evt);
            }
        });
        jPanel1.add(budgetStartDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 130, 40, 30));

        jLabel10.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Budget ID - ");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 30, 140, 30));

        jLabel3.setFont(new java.awt.Font("Verdana", 3, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Rs.");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 330, 30, 30));

        budgetStartDateTextField.setEditable(false);
        budgetStartDateTextField.setBackground(new java.awt.Color(0, 51, 51));
        budgetStartDateTextField.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        budgetStartDateTextField.setForeground(new java.awt.Color(255, 255, 255));
        budgetStartDateTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        budgetStartDateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                budgetStartDateTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(budgetStartDateTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, 240, 30));

        jLabel14.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Amount");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 300, 130, 30));

        deleteBudgetButton.setBackground(new java.awt.Color(255, 0, 0));
        deleteBudgetButton.setText("DELETE");
        deleteBudgetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBudgetButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deleteBudgetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 660, 140, 60));

        addBudgetButton.setBackground(new java.awt.Color(255, 0, 0));
        addBudgetButton.setText("ADD");
        addBudgetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBudgetButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addBudgetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 660, 140, 60));

        updateBudgetButton.setBackground(new java.awt.Color(255, 0, 0));
        updateBudgetButton.setText("UPDATE");
        updateBudgetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBudgetButtonActionPerformed(evt);
            }
        });
        jPanel1.add(updateBudgetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 660, 140, 60));

        backPanel.setBackground(new java.awt.Color(255, 51, 51));
        backPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backPanelMouseClicked(evt);
            }
        });
        backPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText(" Back");
        backPanel.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, -1, 40));

        jPanel1.add(backPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 80, 40));

        jLabel18.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frames/calendar.png"))); // NOI18N
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, 30, 30));

        jLabel19.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Start Date");
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 370, 30));

        budgetIDLabel.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        budgetIDLabel.setForeground(new java.awt.Color(255, 255, 255));
        budgetIDLabel.setText("ID");
        jPanel1.add(budgetIDLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, 40, 30));

        jSeparator4.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator4.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 100));
        jPanel1.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 0, 10, 760));

        budgetAmountTextField.setBackground(new java.awt.Color(0, 51, 51));
        budgetAmountTextField.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        budgetAmountTextField.setForeground(new java.awt.Color(255, 255, 255));
        budgetAmountTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        budgetAmountTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                budgetAmountTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(budgetAmountTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 330, 240, 30));

        categoryList2.setBackground(new java.awt.Color(0, 51, 51));
        categoryList2.setFont(new java.awt.Font("Sitka Small", 0, 14)); // NOI18N
        categoryList2.setForeground(new java.awt.Color(255, 255, 255));
        categoryList2.setToolTipText("");
        categoryList2.setAutoscrolls(false);
        categoryList2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        categoryList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                categoryList2ValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(categoryList2);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 490, 210, 130));

        categoryList1.setBackground(new java.awt.Color(0, 51, 51));
        categoryList1.setFont(new java.awt.Font("Sitka Small", 1, 14)); // NOI18N
        categoryList1.setForeground(new java.awt.Color(255, 255, 255));
        categoryList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Automobile", "Entertainment", "Health Care", "Household", "Personal", "Taxes", "Travel", "Other" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        categoryList1.setToolTipText("");
        categoryList1.setAutoscrolls(false);
        categoryList1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        categoryList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                categoryList1ValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(categoryList1);

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 490, 150, 130));

        budgetCategoryTextField.setBackground(new java.awt.Color(0, 51, 51));
        budgetCategoryTextField.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        budgetCategoryTextField.setForeground(new java.awt.Color(255, 255, 255));
        budgetCategoryTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        budgetCategoryTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                budgetCategoryTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(budgetCategoryTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 440, 350, 30));

        jLabel17.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frames/salary_category.png"))); // NOI18N
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 440, -1, -1));

        jLabel20.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Select any Category");
        jPanel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 400, 290, 30));

        jLabel21.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("End Date");
        jPanel1.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, 370, 30));

        budgetEndDateChooser.setBackground(new java.awt.Color(75, 137, 243));
        budgetEndDateChooser.setToolTipText("");
        budgetEndDateChooser.setDateFormatString("yyyy-MM-dd");
        budgetEndDateChooser.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        budgetEndDateChooser.setMaxSelectableDate(new java.util.Date(253370748688000L));
        budgetEndDateChooser.setMinSelectableDate(new java.util.Date(-62135785712000L));
        budgetEndDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                budgetEndDateChooserPropertyChange(evt);
            }
        });
        jPanel1.add(budgetEndDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 230, 40, 30));

        budgetEndDateTextField.setEditable(false);
        budgetEndDateTextField.setBackground(new java.awt.Color(0, 51, 51));
        budgetEndDateTextField.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        budgetEndDateTextField.setForeground(new java.awt.Color(255, 255, 255));
        budgetEndDateTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        budgetEndDateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                budgetEndDateTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(budgetEndDateTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 230, 240, 30));

        jLabel22.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frames/calendar.png"))); // NOI18N
        jPanel1.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 230, 30, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 540, 750));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Sitka Small", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 0));
        jLabel1.setText("Manage Budget");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 50, 270, -1));

        jPanel9.setBackground(new java.awt.Color(255, 102, 102));
        jPanel9.setForeground(new java.awt.Color(255, 102, 102));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel3.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 90, 350, 3));

        budgetSummaryTable.setForeground(new java.awt.Color(102, 102, 255));
        budgetSummaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Income ID", "Date", "Amount", "Payer", "Mode Of Transaction", "Category"
            }
        ));
        budgetSummaryTable.setColorBackgoundHead(new java.awt.Color(0, 51, 51));
        budgetSummaryTable.setColorBordeFilas(new java.awt.Color(0, 51, 51));
        budgetSummaryTable.setColorBordeHead(new java.awt.Color(255, 255, 255));
        budgetSummaryTable.setColorFilasBackgound2(new java.awt.Color(255, 255, 255));
        budgetSummaryTable.setEditingColumn(0);
        budgetSummaryTable.setEditingRow(0);
        budgetSummaryTable.setMultipleSeleccion(false);
        budgetSummaryTable.setRowHeight(35);
        budgetSummaryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                budgetSummaryTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(budgetSummaryTable);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 770, 420));

        jSeparator3.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 199));
        jPanel3.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 880, 10));

        jSeparator6.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator6.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 100));
        jPanel3.add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 0, 20, 750));

        backPanel1.setBackground(new java.awt.Color(255, 51, 51));
        backPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backPanel1MouseClicked(evt);
            }
        });
        backPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel23.setFont(new java.awt.Font("Verdana", 1, 30)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("X");
        backPanel1.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 30, 40));

        jPanel3.add(backPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 10, 50, 40));

        jSeparator5.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator5.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 199));
        jPanel3.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 740, 880, 10));

        jSeparator7.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator7.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 199));
        jPanel3.add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 880, 10));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 0, 820, 750));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        
        
        try
        {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            
            ResultSet rs = st.executeQuery("select max(budget_id) from Budget");
            if(rs.next())  //first as it would be possible there is not value present
            {
                int budget_id = rs.getInt(1);
                budget_id = budget_id + 1;
                
                String str = String.valueOf(budget_id);
                budgetIDLabel.setText(str);
            }
            else
            {
                System.out.println("HERE ELSE");
                budgetIDLabel.setText("1");
            }
        }
        catch(Exception e)
        {
            System.out.println("HERE");
            JOptionPane.showMessageDialog(null, e);
        }
        
        // BUDGET TABLE
        try
        {
            Connection con = ConnectionProvider.getCon();
            Statement st;
            st = con.createStatement();
            ResultSet rs;
            
            // INCOME TABLE
            //System.out.println("START : "+summary_start_date);
            rs = st.executeQuery("select budget_id as 'Budget ID', budget_start_date as 'Start Date', budget_end_date as 'End Date', budget_amount as Amount, budget_category as Category from Budget where user_email='"+signInEmail+"'");
            budgetSummaryTable.setModel(DbUtils.resultSetToTableModel(rs));
        }
        catch(Exception e)
        {
            System.out.println("HERE");
            JOptionPane.showMessageDialog(null, e);
        }
        
    }//GEN-LAST:event_formComponentShown

    private void budgetSummaryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_budgetSummaryTableMouseClicked
        // TODO add your handling code here:

        int rowNo = budgetSummaryTable.getSelectedRow();
        TableModel model = budgetSummaryTable.getModel();
        
//        incomeDateChooser.setVisible(false);
//        incomeDateTextField.setVisible(true);

        
        //tring str = model.getValueAt(rowNo, 1).toString();
        //System.out.println("\n ::_ "+str);
        //SimpleDateFormat dF = new SimpleDateFormat("yyyy-MM-dd");
        
        budgetIDLabel.setText(model.getValueAt(rowNo,0).toString());
        //incomeDateChooser.setDate(2022/11/11);
        budgetStartDateTextField.setText(model.getValueAt(rowNo, 1).toString());
        budgetEndDateTextField.setText(model.getValueAt(rowNo, 2).toString());
        budgetAmountTextField.setText(model.getValueAt(rowNo, 3).toString());
        budgetCategoryTextField.setText(model.getValueAt(rowNo, 4).toString());

    }//GEN-LAST:event_budgetSummaryTableMouseClicked

    private void backPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backPanel1MouseClicked
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(new ExpenseManager(),"Sure? You want to exit?", "Expense Manager", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if(result == JOptionPane.YES_OPTION)
        System.exit(0);
    }//GEN-LAST:event_backPanel1MouseClicked

    private void budgetEndDateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_budgetEndDateTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_budgetEndDateTextFieldActionPerformed

    private void budgetEndDateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_budgetEndDateChooserPropertyChange
        // TODO add your handling code here:
        String budgetEndDate = String.valueOf(budgetEndDateChooser.getDate());
        // FORMAT THE INCOME DATE
        try
        {
            String dateStr = budgetEndDate;
            DateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
            Date date = (Date)formatter.parse(dateStr);
            System.out.println(date);

            Calendar cal = Calendar.getInstance();
            cal.setTime(date);
            String formatedDate = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" +cal.get(Calendar.DATE);
            System.out.println("formatedDate : " + formatedDate);

            budgetEndDate = formatedDate;

            budgetEndDateTextField.setText(budgetEndDate);

            //String formatedDate = cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" +         cal.get(Calendar.YEAR);
            //System.out.println("formatedDate : " + formatedDate);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_budgetEndDateChooserPropertyChange

    private void budgetCategoryTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_budgetCategoryTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_budgetCategoryTextFieldActionPerformed

    private void categoryList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_categoryList1ValueChanged
        // TODO add your handling code here:

        // set to text field
        budgetCategoryTextField.setText(categoryList1.getSelectedValue());

        // Counter reset for 2nd category list
        //categoryList2Count = 0;

        DefaultListModel listModel1 = new DefaultListModel();

        // AUTOMOBILE
        if((categoryList1.getSelectedValue()).equals("Automobile"))
        {
            String[] items = {"Fuel","Insurance","Loan","Maintainance","Other"};
            for(int i=0; i<items.length; i++)
            listModel1.addElement(items[i]);
            categoryList2.setModel(listModel1);
        }

        // ENTERTAINMENT
        else if((categoryList1.getSelectedValue()).equals("Entertainment"))
        {
            String[] items = {"Concerts","Movies", "OTT Platform", "Video Games/Consoles", "Other"};
            for(int i=0; i<items.length; i++)
            listModel1.addElement(items[i]);
            categoryList2.setModel(listModel1);
        }

        // HEALTH CARE
        else if((categoryList1.getSelectedValue()).equals("Health Care"))
        {
            String[] items = {"Medical Bills", "Loan", "Health Insurance", "Other"};
            for(int i=0; i<items.length; i++)
            listModel1.addElement(items[i]);
            categoryList2.setModel(listModel1);
        }

        // HOUSEHOLD
        else if((categoryList1.getSelectedValue()).equals("Household"))
        {
            String[] items = {"Groceries","Consumables", "Applicances", "Household Tools", "Loan", "Other"};
            for(int i=0; i<items.length; i++)
            listModel1.addElement(items[i]);
            categoryList2.setModel(listModel1);
        }

        // PERSONAL
        else if((categoryList1.getSelectedValue()).equals("Personal"))
        {
            String[] items = {"Clothing" ,"Grooming", "Child Care", "Education", "Other"};
            for(int i=0; i<items.length; i++)
            listModel1.addElement(items[i]);
            categoryList2.setModel(listModel1);
        }

        // TAXES
        else if((categoryList1.getSelectedValue()).equals("Taxes"))
        {
            String[] items = {"Service Tax" ,"Property Tax", "Sales Tax", "Income Tax", "Other"};
            for(int i=0; i<items.length; i++)
            listModel1.addElement(items[i]);
            categoryList2.setModel(listModel1);
        }

        // TRAVEL
        else if((categoryList1.getSelectedValue()).equals("Travel"))
        {
            String[] items = {"Travel Tickets" ,"Hotel Bills", "Other"};
            for(int i=0; i<items.length; i++)
            listModel1.addElement(items[i]);
            categoryList2.setModel(listModel1);
        }

        else
        {
            listModel1.addElement("");
            categoryList2.setModel(listModel1);
        }
    }//GEN-LAST:event_categoryList1ValueChanged

    private void categoryList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_categoryList2ValueChanged
        // TODO add your handling code here:

        // **** TO RESET THE VALUE OF CATEGORY while retaining the value from 1st category
        String str="";
        String str2="";

        if(categoryList2Count == 1)
        {
            str = budgetCategoryTextField.getText();
            char[] ch1 = new char[str.length()];

            for(int i=0; i<str.length() ; i++)
            {
                ch1[i] = str.charAt(i);
                if(ch1[i] == ' ')
                break;
                str2 = str2+ch1[i];
            }

            System.out.println(str2);

            budgetCategoryTextField.setText(str2 + " - " + categoryList2.getSelectedValue());

            return;
        }
        String expenseCategory = categoryList2.getSelectedValue();
        budgetCategoryTextField.setText(budgetCategoryTextField.getText() + " - " + expenseCategory);

        categoryList2Count = 1;
    }//GEN-LAST:event_categoryList2ValueChanged

    private void budgetAmountTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_budgetAmountTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_budgetAmountTextFieldActionPerformed

    private void backPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backPanelMouseClicked
        // TODO add your handling code here:5

        dispose();
        setVisible(false);
        new Home(signInEmail).setVisible(true);
    }//GEN-LAST:event_backPanelMouseClicked

    private void updateBudgetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBudgetButtonActionPerformed
        // TODO add your handling code here:

        int budgetID = Integer.parseInt(budgetIDLabel.getText());

        //        // CHECK IF RECORD EXISTS IN TABLE TO UPDATE
        try
        {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();

            // Update Income table
            ResultSet rs = st.executeQuery("select * from Budget where budget_id='"+budgetID+"'");

            if(!rs.next())  //first as it would be possible there is not value present
            {
                JOptionPane.showMessageDialog(null, "No such record exists to update");
                return;
            }
            //            setVisible(false);
            //            new AddIncome(signInEmail).setVisible(true);
        }
        catch(Exception e){}

        String budget_start_date = String.valueOf(budgetStartDateChooser.getDate());
        String budget_end_date = String.valueOf(budgetEndDateChooser.getDate());
        String budgetAmount = budgetAmountTextField.getText();
        String budgetCategory = budgetCategoryTextField.getText();

        // FORMAT THE DATE
        try
        {
            // ******* START DATE ********
            String dateStr = budget_start_date;
            DateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
            java.util.Date startDate = (java.util.Date)formatter.parse(dateStr);
            //System.out.println(startDate);

            Calendar calStart = Calendar.getInstance();
            calStart.setTime(startDate);
            String startFormatedDate = calStart.get(Calendar.YEAR) + "-" + (calStart.get(Calendar.MONTH) + 1) + "-" +calStart.get(Calendar.DATE);
            //System.out.println("formatedDate : " + startFormatedDate);

            // ******* END DATE ********
            dateStr = budget_end_date;
            java.util.Date endDate = (java.util.Date)formatter.parse(dateStr);

            Calendar calEnd = Calendar.getInstance();
            calEnd.setTime(endDate);
            String endFormatedDate = calEnd.get(Calendar.YEAR) + "-" + (calEnd.get(Calendar.MONTH) + 1) + "-" +calEnd.get(Calendar.DATE);

            // ** COMPARE TWO DATES **
            if(calEnd.get(Calendar.YEAR) < calStart.get(Calendar.YEAR))
            {
                throw new WrongDatesException();
            }
            else if(calEnd.get(Calendar.MONTH) < calStart.get(Calendar.MONTH))
            {
                throw new WrongDatesException();
            }
            else if(calEnd.get(Calendar.DATE) < calStart.get(Calendar.DATE))
            {
                throw new WrongDatesException();
            }
            else{}

            budget_end_date = endFormatedDate;
            budget_start_date = startFormatedDate;

            //String formatedDate = cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" +         cal.get(Calendar.YEAR);
            //System.out.println("formatedDate : " + formatedDate);
        }
        catch(WrongDatesException e)
        {
            JOptionPane.showMessageDialog(null,"Please select appropriate Start and End dates");
            return;
        }
        // Date was not changed
        catch(ParseException e)
        {
            budget_start_date = budgetStartDateTextField.getText();
            budget_end_date = budgetEndDateTextField.getText();
        }
        catch(Exception e)
        {
            System.out.println(e);
            JOptionPane.showMessageDialog(null, e);
            return;
        }

        //UPDATE QUERY
        try
        {
            //Check if all fields are filled
            if(budget_start_date.equals("") || budget_end_date.equals("") || budgetAmount.equals("") || budgetCategory.equals(""))
            {
                throw new NullFieldException();
            }

            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();

            // Update Income table
            st.executeUpdate("update Budget set budget_start_date='"+budget_start_date+"', budget_end_date='"+budget_end_date+"', budget_amount='"+budgetAmount+"', budget_category='"+budgetCategory+"' where budget_id = '"+budgetID+"'");

            JOptionPane.showMessageDialog(null, "Budget details Updated successfully");
            setVisible(false);
            new AddBudget(signInEmail).setVisible(true);

        }
        //
        //Fields are null
        catch(NullFieldException e)
        {
            JOptionPane.showMessageDialog(null,"Please fill all the details");
        }

        //Any other Exceotion
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
            System.out.println(e);
        }
    }//GEN-LAST:event_updateBudgetButtonActionPerformed

    private void addBudgetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBudgetButtonActionPerformed
        // TODO add your handling code here:

        //        incomeDateTextField.setVisible(false);
        //        incomeDateChooser.setVisible(true);

        //JOptionPane.showMessageDialog(null,"Please enter Income Details now");
        int budget_id=0;
        try
        {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();

            ResultSet rs = st.executeQuery("select max(budget_id) from Budget");
            if(rs.next())  //first as it would be possible there is not value present
            {
                budget_id = rs.getInt(1);
                budget_id = budget_id + 1;

            }
            else
            {
                System.out.println("HERE ELSE");
                budgetIDLabel.setText("1");
            }
        }
        catch(Exception e)
        {
            System.out.println("HERE");
            JOptionPane.showMessageDialog(null, e);
        }

        if(!budgetIDLabel.getText().equals(String.valueOf(budget_id)))
        {
            new AddBudget(signInEmail).setVisible(false);
            new AddBudget(signInEmail).setVisible(true);

            //            incomeDateTextField.setVisible(false);
            //            incomeDateChooser.setVisible(true);

            JOptionPane.showMessageDialog(null,"Please enter Budget Details now");

            return;
        }

        int budgetID = Integer.parseInt(budgetIDLabel.getText());
        String budgetStartDate = String.valueOf(budgetStartDateChooser.getDate());
        String budgetEndDate = String.valueOf(budgetEndDateChooser.getDate());
        String budgetAmount = budgetAmountTextField.getText();
        String budgetCategory = budgetCategoryTextField.getText();
        //        String incomePayer = String.valueOf(incomePayerComboBox.getSelectedItem());
        //        String incomeModeOfTransaction = String.valueOf(incomeModeOfTransactionComboBox.getSelectedItem());
        //        String incomeCategory = String.valueOf(incomeCategoryComboBox.getSelectedItem());

        // FORMAT THE DATE
        try
        {
            // ******* START DATE ********
            String dateStr = budgetStartDate;
            DateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
            java.util.Date startDate = (java.util.Date)formatter.parse(dateStr);
            //System.out.println(startDate);

            Calendar calStart = Calendar.getInstance();
            calStart.setTime(startDate);
            String startFormatedDate = calStart.get(Calendar.YEAR) + "-" + (calStart.get(Calendar.MONTH) + 1) + "-" +calStart.get(Calendar.DATE);
            //System.out.println("formatedDate : " + startFormatedDate);

            // ******* END DATE ********
            dateStr = budgetEndDate;
            java.util.Date endDate = (java.util.Date)formatter.parse(dateStr);

            Calendar calEnd = Calendar.getInstance();
            calEnd.setTime(endDate);
            String endFormatedDate = calEnd.get(Calendar.YEAR) + "-" + (calEnd.get(Calendar.MONTH) + 1) + "-" +calEnd.get(Calendar.DATE);

            // ** COMPARE TWO DATES **
            if(calEnd.get(Calendar.YEAR) < calStart.get(Calendar.YEAR))
            {
                throw new WrongDatesException();
            }
            else if(calEnd.get(Calendar.MONTH) < calStart.get(Calendar.MONTH))
            {
                throw new WrongDatesException();
            }
            else if(calEnd.get(Calendar.DATE) < calStart.get(Calendar.DATE))
            {
                throw new WrongDatesException();
            }
            else{}

            budgetEndDate = endFormatedDate;
            budgetStartDate = startFormatedDate;

            //String formatedDate = cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" +         cal.get(Calendar.YEAR);
            //System.out.println("formatedDate : " + formatedDate);
        }
        catch(WrongDatesException e)
        {
            JOptionPane.showMessageDialog(null,"Please select appropriate Start and End dates");
            return;
        }
        catch(Exception e)
        {
            System.out.println(e);
            return;
        }

        System.out.println(budgetID);
        System.out.println(budgetStartDate);
        System.out.println(budgetEndDate);
        System.out.println(budgetAmount);
        //        System.out.println(incomePayer);
        //        System.out.println(incomeModeOfTransaction);
        //        System.out.println(incomeCategory);

        try
        {
            //Check if all fields are filled
            if(budgetStartDate.equals("") || budgetEndDate.equals("") || budgetAmount.equals("") || budgetCategory.equals(""))
            {
                throw new NullFieldException();
            }

            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();

            // Check if Budget already exists
            ResultSet rs = st.executeQuery("select * from Budget where budget_category='"+budgetCategory+"'");
            if(rs.next())
            {
                throw new BudgetException();
            }

            st.executeUpdate("insert into Budget values ('"+budgetID+"','"+signInEmail+"','"+budgetStartDate+"','"+budgetEndDate+"','"+budgetCategory+"','"+budgetAmount+"')");
            //String query = "insert into Customer "+"values ("

            JOptionPane.showMessageDialog(null, "Successfully added Budget Details");

            setVisible(false);
            new AddBudget(signInEmail).setVisible(true);

        }

        //Fields are null
        catch(NullFieldException e)
        {
            //new NullFieldException();
            JOptionPane.showMessageDialog(null,"Please fill all the details");
        }

        //Budget alreay exists
        catch(BudgetException e)
        {
            JOptionPane.showMessageDialog(null,"Budget for '"+budgetCategory+"' already exists.");
        }

        //Any other Exceotion
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
            System.out.println(e);
        }

    }//GEN-LAST:event_addBudgetButtonActionPerformed

    private void deleteBudgetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBudgetButtonActionPerformed
        // TODO add your handling code here:

        int budgetID = Integer.parseInt(budgetIDLabel.getText());

        try
        {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();

            // Check if there exists any entry
            // Update Income table
            ResultSet rs = st.executeQuery("select * from Budget where budget_id='"+budgetID+"'");
            if(!rs.next())  //first as it would be possible there is not value present
            {
                JOptionPane.showMessageDialog(null, "No such record exists to delete");
                return;
            }

            // Update Income table
            st.executeUpdate("delete from Budget where budget_id='"+budgetID+"' ");

            JOptionPane.showMessageDialog(null, "Budget details Deleted successfully");
            setVisible(false);
            new AddBudget(signInEmail).setVisible(true);

        }
        //Any other Exceotion
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
            System.out.println(e);
        }
    }//GEN-LAST:event_deleteBudgetButtonActionPerformed

    private void budgetStartDateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_budgetStartDateTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_budgetStartDateTextFieldActionPerformed

    private void budgetStartDateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_budgetStartDateChooserPropertyChange
        // TODO add your handling code here:

        String budgetStartDate = String.valueOf(budgetStartDateChooser.getDate());
        // FORMAT THE INCOME DATE
        try
        {
            String dateStr = budgetStartDate;
            DateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
            Date date = (Date)formatter.parse(dateStr);
            System.out.println(date);

            Calendar cal = Calendar.getInstance();
            cal.setTime(date);
            String formatedDate = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" +cal.get(Calendar.DATE);
            System.out.println("formatedDate : " + formatedDate);

            budgetStartDate = formatedDate;

            budgetStartDateTextField.setText(budgetStartDate);

            //String formatedDate = cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" +         cal.get(Calendar.YEAR);
            //System.out.println("formatedDate : " + formatedDate);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_budgetStartDateChooserPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddBudget.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddBudget.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddBudget.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddBudget.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddBudget("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojerusan.RSMaterialButtonCircle addBudgetButton;
    private javax.swing.JPanel backPanel;
    private javax.swing.JPanel backPanel1;
    private javax.swing.JTextField budgetAmountTextField;
    private javax.swing.JTextField budgetCategoryTextField;
    private com.toedter.calendar.JDateChooser budgetEndDateChooser;
    private javax.swing.JTextField budgetEndDateTextField;
    private javax.swing.JLabel budgetIDLabel;
    private com.toedter.calendar.JDateChooser budgetStartDateChooser;
    private javax.swing.JTextField budgetStartDateTextField;
    private rojerusan.RSTableMetro budgetSummaryTable;
    private javax.swing.JList<String> categoryList1;
    private javax.swing.JList<String> categoryList2;
    private rojerusan.RSMaterialButtonCircle deleteBudgetButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private rojerusan.RSMaterialButtonCircle updateBudgetButton;
    // End of variables declaration//GEN-END:variables

    private static class WrongDatesException extends Exception {}
    static class StopProcessException extends Exception{}
    static class NullFieldException extends Exception{}
    static class ContactNumberException extends Exception{}
    static class BudgetException extends Exception{}
    private static class NoRadioSelectedException extends Exception {}
}
