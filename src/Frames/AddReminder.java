/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;
import ProjectDatabaseConnection.ConnectionProvider;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JTable;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author shaun
 */
public class AddReminder extends javax.swing.JFrame {

    /**
     * Creates new form AddReminder
     */
    
    String signInEmail="";
    
    public AddReminder(String sign_in_email) {
        initComponents();
        
        signInEmail = sign_in_email;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        reminderDateTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        deleteReminderButton = new rojerusan.RSMaterialButtonCircle();
        addReminderButton = new rojerusan.RSMaterialButtonCircle();
        updateReminderButton = new rojerusan.RSMaterialButtonCircle();
        backPanel = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        reminderIDLabel = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel21 = new javax.swing.JLabel();
        reminderDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        reminderMessageTextArea = new javax.swing.JTextArea();
        reminderTitleTextField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reminderSummaryTable = new rojerusan.RSTableMetro();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        backPanel1 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 51, 51));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Reminder ID -");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, 150, 30));

        reminderDateTextField.setBackground(new java.awt.Color(0, 51, 51));
        reminderDateTextField.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        reminderDateTextField.setForeground(new java.awt.Color(255, 255, 255));
        reminderDateTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        reminderDateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reminderDateTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(reminderDateTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 540, 240, 30));

        jLabel14.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Reminder Message");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 250, 220, 30));

        deleteReminderButton.setBackground(new java.awt.Color(255, 0, 0));
        deleteReminderButton.setText("DELETE");
        deleteReminderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteReminderButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deleteReminderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 660, 140, 60));

        addReminderButton.setBackground(new java.awt.Color(255, 0, 0));
        addReminderButton.setText("ADD");
        addReminderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addReminderButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addReminderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 660, 140, 60));

        updateReminderButton.setBackground(new java.awt.Color(255, 0, 0));
        updateReminderButton.setText("UPDATE");
        updateReminderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateReminderButtonActionPerformed(evt);
            }
        });
        jPanel1.add(updateReminderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 660, 140, 60));

        backPanel.setBackground(new java.awt.Color(255, 51, 51));
        backPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backPanelMouseClicked(evt);
            }
        });
        backPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText(" Back");
        backPanel.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, -1, 40));

        jPanel1.add(backPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 80, 40));

        jLabel18.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frames/calendar.png"))); // NOI18N
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, 30, 30));

        jLabel19.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Reminder Title");
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 160, 370, 30));

        reminderIDLabel.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        reminderIDLabel.setForeground(new java.awt.Color(255, 255, 255));
        reminderIDLabel.setText("ID");
        jPanel1.add(reminderIDLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 80, 40, 30));

        jSeparator4.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator4.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 100));
        jPanel1.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 0, 10, 760));

        jLabel21.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Reminder Date");
        jPanel1.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 510, 190, 30));

        reminderDateChooser.setBackground(new java.awt.Color(75, 137, 243));
        reminderDateChooser.setToolTipText("");
        reminderDateChooser.setDateFormatString("yyyy-MM-dd");
        reminderDateChooser.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        reminderDateChooser.setMaxSelectableDate(new java.util.Date(253370748688000L));
        reminderDateChooser.setMinSelectableDate(new java.util.Date(-62135785712000L));
        reminderDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                reminderDateChooserPropertyChange(evt);
            }
        });
        jPanel1.add(reminderDateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 540, 40, 30));

        jLabel22.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frames/calendar.png"))); // NOI18N
        jPanel1.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 540, 30, 30));

        reminderMessageTextArea.setBackground(new java.awt.Color(0, 51, 51));
        reminderMessageTextArea.setColumns(20);
        reminderMessageTextArea.setFont(new java.awt.Font("Sitka Small", 3, 18)); // NOI18N
        reminderMessageTextArea.setForeground(new java.awt.Color(255, 255, 255));
        reminderMessageTextArea.setRows(5);
        reminderMessageTextArea.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));
        jScrollPane2.setViewportView(reminderMessageTextArea);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 300, 370, 150));

        reminderTitleTextField.setBackground(new java.awt.Color(0, 51, 51));
        reminderTitleTextField.setFont(new java.awt.Font("Verdana", 1, 15)); // NOI18N
        reminderTitleTextField.setForeground(new java.awt.Color(255, 255, 255));
        reminderTitleTextField.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        reminderTitleTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reminderTitleTextFieldActionPerformed(evt);
            }
        });
        jPanel1.add(reminderTitleTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 190, 240, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 540, 750));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Sitka Small", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 0));
        jLabel1.setText("Manage Reminders");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 50, 340, -1));

        jPanel9.setBackground(new java.awt.Color(255, 102, 102));
        jPanel9.setForeground(new java.awt.Color(255, 102, 102));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel3.add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 90, 350, 3));

        reminderSummaryTable.setForeground(new java.awt.Color(102, 102, 255));
        reminderSummaryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Income ID", "Date", "Amount", "Payer", "Mode Of Transaction", "Category"
            }
        ));
        reminderSummaryTable.setColorBackgoundHead(new java.awt.Color(0, 51, 51));
        reminderSummaryTable.setColorBordeFilas(new java.awt.Color(0, 51, 51));
        reminderSummaryTable.setColorBordeHead(new java.awt.Color(255, 255, 255));
        reminderSummaryTable.setColorFilasBackgound2(new java.awt.Color(255, 255, 255));
        reminderSummaryTable.setEditingColumn(0);
        reminderSummaryTable.setEditingRow(0);
        reminderSummaryTable.setMultipleSeleccion(false);
        reminderSummaryTable.setRowHeight(35);
        reminderSummaryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reminderSummaryTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(reminderSummaryTable);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 770, 420));

        jSeparator3.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 199));
        jPanel3.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 880, 10));

        jSeparator6.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator6.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 100));
        jPanel3.add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 0, 20, 750));

        backPanel1.setBackground(new java.awt.Color(255, 51, 51));
        backPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backPanel1MouseClicked(evt);
            }
        });
        backPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel23.setFont(new java.awt.Font("Verdana", 1, 30)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("X");
        backPanel1.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 30, 40));

        jPanel3.add(backPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 10, 50, 40));

        jSeparator5.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator5.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 199));
        jPanel3.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 740, 880, 10));

        jSeparator7.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator7.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 199));
        jPanel3.add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 880, 10));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 0, 820, 750));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void reminderDateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reminderDateTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reminderDateTextFieldActionPerformed

    private void deleteReminderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteReminderButtonActionPerformed
        // TODO add your handling code here:

        int reminderID = Integer.parseInt(reminderIDLabel.getText());

        try
        {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();

            // Check if there exists any entry
            // Update Income table
            ResultSet rs = st.executeQuery("select * from Reminder where reminder_id='"+reminderID+"'");
            if(!rs.next())  //first as it would be possible there is not value present
            {
                JOptionPane.showMessageDialog(null, "No such record exists to delete");
                return;
            }

            // Update Income table
            st.executeUpdate("delete from Reminder where reminder_id = '"+reminderID+"' ");

            JOptionPane.showMessageDialog(null, "Reminder details Deleted successfully");
            setVisible(false);
            new AddReminder(signInEmail).setVisible(true);

        }
        //Any other Exceotion
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
            System.out.println(e);
        }
    }//GEN-LAST:event_deleteReminderButtonActionPerformed

    private void addReminderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addReminderButtonActionPerformed
        // TODO add your handling code here:

        //        incomeDateTextField.setVisible(false);
        //        incomeDateChooser.setVisible(true);

        //JOptionPane.showMessageDialog(null,"Please enter Income Details now");
        int reminder_id=0;
        try
        {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();

            ResultSet rs = st.executeQuery("select max(reminder_id) from Reminder");
            if(rs.next())  //first as it would be possible there is not value present
            {
                reminder_id = rs.getInt(1);
                reminder_id = reminder_id + 1;

            }
            else
            {
                System.out.println("HERE ELSE");
                reminderIDLabel.setText("1");
            }
        }
        catch(Exception e)
        {
            System.out.println("HERE");
            JOptionPane.showMessageDialog(null, e);
        }

        if(!reminderIDLabel.getText().equals(String.valueOf(reminder_id)))
        {
            setVisible(false);
            new AddReminder(signInEmail).setVisible(true);

            //            incomeDateTextField.setVisible(false);
            //            incomeDateChooser.setVisible(true);

            JOptionPane.showMessageDialog(null,"Please enter Reminder Details now");

            return;
        }

        int reminderID = Integer.parseInt(reminderIDLabel.getText());
        String reminderTitle = reminderTitleTextField.getText();
        String reminderMessage = reminderMessageTextArea.getText();
        String reminderDate = String.valueOf(reminderDateChooser.getDate());
        
        //        String incomePayer = String.valueOf(incomePayerComboBox.getSelectedItem());
        //        String incomeModeOfTransaction = String.valueOf(incomeModeOfTransactionComboBox.getSelectedItem());
        //        String incomeCategory = String.valueOf(incomeCategoryComboBox.getSelectedItem());

        // FORMAT THE DATE
        try
        {
            // ******* START DATE ********
            String dateStr = reminderDate;
            DateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
            java.util.Date startDate = (java.util.Date)formatter.parse(dateStr);
            //System.out.println(startDate);

            Calendar calStart = Calendar.getInstance();
            calStart.setTime(startDate);
            String reminderFormatedDate = calStart.get(Calendar.YEAR) + "-" + (calStart.get(Calendar.MONTH) + 1) + "-" +calStart.get(Calendar.DATE);
            //System.out.println("formatedDate : " + startFormatedDate);

            reminderDate = reminderFormatedDate;

            //String formatedDate = cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" +         cal.get(Calendar.YEAR);
            //System.out.println("formatedDate : " + formatedDate);
        }
     
        catch(Exception e)
        {
            System.out.println(e);
            return;
        }

        // ADD QUERY
        try
        {
            //Check if all fields are filled
            if(reminderTitle.equals("") || reminderMessage.equals("") || reminderDate.equals(""))
            {
                throw new NullFieldException();
            }

            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();

            // Check if Budget already exists
            ResultSet rs = st.executeQuery("select * from Reminder where reminder_date='"+reminderDate+"'");
            if(rs.next())
            {
                throw new BudgetException();
            }

            st.executeUpdate("insert into Reminder values ('"+reminderID+"','"+signInEmail+"','"+reminderTitle+"','"+reminderMessage+"','"+reminderDate+"')");
            //String query = "insert into Customer "+"values ("

            JOptionPane.showMessageDialog(null, "Successfully added Reminder");

            setVisible(false);
            new AddReminder(signInEmail).setVisible(true);

        }

        //Fields are null
        catch(NullFieldException e)
        {
            //new NullFieldException();
            JOptionPane.showMessageDialog(null,"Please fill all the details");
        }

        //Budget alreay exists
        catch(BudgetException e)
        {
            JOptionPane.showMessageDialog(null,"Reminder for date '"+reminderDate+"' already exists.");
        }

        //Any other Exceotion
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
            System.out.println(e);
        }
    }//GEN-LAST:event_addReminderButtonActionPerformed

    private void updateReminderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateReminderButtonActionPerformed
        // TODO add your handling code here:

        int reminderID = Integer.parseInt(reminderIDLabel.getText());
        String reminderTitle = reminderTitleTextField.getText();
        String reminderMessage = reminderMessageTextArea.getText();
        String reminderDate = reminderDateTextField.getText();
        
        //UPDATE QUERY
        try
        {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs;
            
            // Update Income table
            rs = st.executeQuery("select * from Reminder where reminder_id='"+reminderID+"'");

            if(!rs.next())  //first as it would be possible there is not value present
            {
                JOptionPane.showMessageDialog(null, "No such record exists to update");
                return;
            }
            //            setVisible(false);
            //            new AddIncome(signInEmail).setVisible(true);
            
            //Check if all fields are filled
            if(reminderTitle.equals("") || reminderMessage.equals("") || reminderDate.equals(""))
            {
                throw new NullFieldException();
            }

            

            // Update Income table
            st.executeUpdate("update Reminder set reminder_title='"+reminderTitle+"', reminder_message='"+reminderMessage+"', reminder_date='"+reminderDate+"' where reminder_id = '"+reminderID+"'");

            JOptionPane.showMessageDialog(null, "Reminder details Updated successfully");
            setVisible(false);
            new AddReminder(signInEmail).setVisible(true);

        }
        //
        //Fields are null
        catch(NullFieldException e)
        {
            JOptionPane.showMessageDialog(null,"Please fill all the details");
        }

        //Any other Exceotion
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
            System.out.println(e);
        }
    }//GEN-LAST:event_updateReminderButtonActionPerformed

    private void backPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backPanelMouseClicked
        // TODO add your handling code here:5

        dispose();
        setVisible(false);
        new Home(signInEmail).setVisible(true);
    }//GEN-LAST:event_backPanelMouseClicked

    private void reminderDateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_reminderDateChooserPropertyChange
        // TODO add your handling code here:
       
        String reminderDate = String.valueOf(reminderDateChooser.getDate());
        // FORMAT THE INCOME DATE
        try
        {
            String dateStr = reminderDate;
            DateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy");
            java.util.Date date = (java.util.Date)formatter.parse(dateStr);
            System.out.println(date);

            Calendar cal = Calendar.getInstance();
            cal.setTime(date);
            String formatedDate = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" +cal.get(Calendar.DATE);
            System.out.println("formatedDate : " + formatedDate);

            reminderDate = formatedDate;

            reminderDateTextField.setText(reminderDate);

            //String formatedDate = cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" +         cal.get(Calendar.YEAR);
            //System.out.println("formatedDate : " + formatedDate);
        }
        catch(Exception e)
        {
            System.out.println(e);
            //JOptionPane.showMessageDialog(null, e);
        }
        
        
    }//GEN-LAST:event_reminderDateChooserPropertyChange

    private void reminderSummaryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reminderSummaryTableMouseClicked
        // TODO add your handling code here:

        int rowNo = reminderSummaryTable.getSelectedRow();
        TableModel model = reminderSummaryTable.getModel();
        
//        incomeDateChooser.setVisible(false);
//        incomeDateTextField.setVisible(true);

        
        //tring str = model.getValueAt(rowNo, 1).toString();
        //System.out.println("\n ::_ "+str);
        //SimpleDateFormat dF = new SimpleDateFormat("yyyy-MM-dd");
        
        reminderIDLabel.setText(model.getValueAt(rowNo,0).toString());
        //incomeDateChooser.setDate(2022/11/11);
        reminderDateTextField.setText(model.getValueAt(rowNo, 1).toString());
        reminderTitleTextField.setText(model.getValueAt(rowNo, 2).toString());
        reminderMessageTextArea.setText(model.getValueAt(rowNo, 3).toString());
        

    }//GEN-LAST:event_reminderSummaryTableMouseClicked

    private void backPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backPanel1MouseClicked
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(new ExpenseManager(),"Sure? You want to exit?", "Expense Manager", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        if(result == JOptionPane.YES_OPTION)
        System.exit(0);
    }//GEN-LAST:event_backPanel1MouseClicked

    private void reminderTitleTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reminderTitleTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reminderTitleTextFieldActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        
        try
        {
            Connection con = ConnectionProvider.getCon();
            Statement st = con.createStatement();
            
            ResultSet rs = st.executeQuery("select max(reminder_id) from Reminder");
            if(rs.next())  //first as it would be possible there is not value present
            {
                int reminder_id = rs.getInt(1);
                reminder_id = reminder_id + 1;
                
                String str = String.valueOf(reminder_id);
                reminderIDLabel.setText(str);
            }
            else
            {
                System.out.println("HERE ELSE");
                reminderIDLabel.setText("1");
            }
        }
        catch(Exception e)
        {
            System.out.println("HERE");
            JOptionPane.showMessageDialog(null, e);
        }
        
        // REMINDER TABLE
        try
        {
            Connection con = ConnectionProvider.getCon();
            Statement st;
            st = con.createStatement();
            ResultSet rs;
            
            // INCOME TABLE
            //System.out.println("START : "+summary_start_date);
            rs = st.executeQuery("select reminder_id as 'Reminder ID', reminder_date as 'Reminder Date', reminder_title as 'Title', reminder_message as 'Message' from Reminder where user_email='"+signInEmail+"'");
            reminderSummaryTable.setModel(DbUtils.resultSetToTableModel(rs));
            }
        catch(Exception e)
        {
            System.out.println("HERE");
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_formComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddReminder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddReminder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddReminder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddReminder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddReminder("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojerusan.RSMaterialButtonCircle addReminderButton;
    private javax.swing.JPanel backPanel;
    private javax.swing.JPanel backPanel1;
    private rojerusan.RSMaterialButtonCircle deleteReminderButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private com.toedter.calendar.JDateChooser reminderDateChooser;
    private javax.swing.JTextField reminderDateTextField;
    private javax.swing.JLabel reminderIDLabel;
    private javax.swing.JTextArea reminderMessageTextArea;
    private rojerusan.RSTableMetro reminderSummaryTable;
    private javax.swing.JTextField reminderTitleTextField;
    private rojerusan.RSMaterialButtonCircle updateReminderButton;
    // End of variables declaration//GEN-END:variables

    private static class WrongDatesException extends Exception {}
    static class StopProcessException extends Exception{}
    static class NullFieldException extends Exception{}
    static class ContactNumberException extends Exception{}
    static class BudgetException extends Exception{}
    private static class NoRadioSelectedException extends Exception {}
}
